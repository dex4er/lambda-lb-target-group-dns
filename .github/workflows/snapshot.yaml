name: Snapshot

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - .dockerignore
      - .editorconfig
      - .gitignore
      - .hadolint.yaml
      - .markdownlint.yaml
      - .trunk/**
      - LICENSE
      - README.md
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build:
    name: Build

    permissions:
      id-token: write
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Git tags
        run: git fetch --force --tags

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.6 # datasource=github-releases depName=golang/go

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Configure AWS credentials
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR Public
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: 1.24.0 # datasource=github-releases depName=goreleaser/goreleaser
          args: release --config=.goreleaser-release.yaml --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the version number
        run: echo IMAGE_VERSION=v$(jq -r .version dist/metadata.json) >> $GITHUB_ENV

      - name: Test local image
        run: |
          docker run --rm "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}-linux-amd64" 2>&1 | grep -s "^Usage: /entrypoint"

      - name: Push images and manifests
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          docker push "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}-linux-amd64"
          docker push "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}-linux-arm64"
          docker push "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}-linux-amd64"
          docker push "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}-linux-arm64"
          docker manifest create "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}" "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}-linux-amd64" "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}-linux-arm64"
          docker manifest push "${{ vars.DOCKER_REPO }}:${{ env.IMAGE_VERSION }}" 
          docker manifest create "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}" "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}-linux-amd64" "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}-linux-arm64"
          docker manifest push "${{ vars.PUBLIC_ECR_REPO }}:${{ env.IMAGE_VERSION }}"
